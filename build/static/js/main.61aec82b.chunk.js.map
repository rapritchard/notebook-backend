{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","alert","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8NAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAC3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCU3B,EAfA,WAEb,OADgBI,IAAMC,IAHR,UAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,SAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,SAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,8NCX3C,IAgFeK,EAhFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEH,IAAMC,EAAqB,SAAAb,GACzB,IAAMb,EAAOiB,EAAMU,MAAK,SAAAC,GAAC,OAAIA,EAAEf,KAAOA,KAChCgB,E,yVAAW,IAAQ7B,EAAR,CAAcG,WAAYH,EAAKG,YAEhDqB,EACUX,EAAIgB,GAAarB,MAAK,SAAAsB,GAC5BZ,EAASD,EAAMc,KAAI,SAAA/B,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO8B,SAEpDE,OAAM,SAAAC,GACLC,MAAM,YAAD,OAAalC,EAAKI,QAAlB,yCACLc,EAASD,EAAMkB,QAAO,SAAAP,GAAC,OAAIA,EAAEf,KAAOA,UAiCpCuB,EAAcf,EAAUJ,EAAQA,EAAMkB,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAEhE,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAtBee,EAAYL,KAAI,SAAA/B,GAAI,OACrC,kBAAC,EAAD,CACEqC,IAAKrC,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAAMyB,EAAmB1B,EAAKa,WAqBhD,0BAAMyB,SA1CM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASe,EACTuB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,GAC3BjC,GAAII,EAAM8B,OAAS,GAGrBvB,EACUiB,GACPjC,MAAK,SAAAsB,GACFZ,EAASD,EAAM+B,OAAOlB,IACtBV,EAAW,SA8Bb,2BACE6B,MAAO9B,EACP+B,SApBiB,SAACX,GACxBnB,EAAWmB,EAAMY,OAAOF,UAqBpB,4BAAQG,KAAK,UAAb,WC1ERC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.61aec82b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important';\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;","import axios from 'axios';\r\nconst baseUrl = '/notes';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note';\r\nimport noteService from './services/notes';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('');\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes);\r\n      })\r\n  }, []);\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote).then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\r\n      })\r\n      .catch(error => {\r\n        alert(`The note ${note.content} was already deleted from the server`);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n          setNotes(notes.concat(returnedNote));\r\n          setNewNote('');\r\n      });\r\n  }\r\n\r\n  const rows = () => notesToShow.map(note => \r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  );\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  }\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? 'Important' : 'All'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote} \r\n          onChange={handleNoteChange}\r\n         />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'))\r\n"],"sourceRoot":""}